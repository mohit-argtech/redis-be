apiVersion: v1
kind: Pod
metadata:
  name: redis-node-0
  generateName: redis-node-
  namespace: redis
  uid: 1949e1b7-f61c-4fa7-ae6d-068203e42263
  resourceVersion: '12478356'
  creationTimestamp: '2023-11-27T05:31:25Z'
  labels:
    app.kubernetes.io/component: node
    app.kubernetes.io/instance: redis
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.2.3
    apps.kubernetes.io/pod-index: '0'
    controller-revision-hash: redis-node-5c74d57df8
    helm.sh/chart: redis-18.4.0
    statefulset.kubernetes.io/pod-name: redis-node-0
  annotations:
    checksum/configmap: f79abcf582f99d9657bb77fc156ee27be9b11a53ec6f54e6d8e3c0cc076e87ab
    checksum/health: 1eace71641fb5bd753e90012419e82c10b1180d694f91d83743b727a5aacca73
    checksum/scripts: 6db9dc4c1c9395f33c8e429d9e93a27f73114fb6024ad906f1fded0add8f7c64
    checksum/secret: dff5557db7be8b15cb7ea41a5ff4270286aa3ac77064bdcbfc382b22713052b6
  ownerReferences:
    - apiVersion: apps/v1
      kind: StatefulSet
      name: redis-node
      uid: 066aae32-7afa-4772-aafe-95ca14698a09
      controller: true
      blockOwnerDeletion: true
  managedFields:
    - manager: kube-controller-manager
      operation: Update
      apiVersion: v1
      time: '2023-11-27T05:31:25Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:checksum/configmap: {}
            f:checksum/health: {}
            f:checksum/scripts: {}
            f:checksum/secret: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:apps.kubernetes.io/pod-index: {}
            f:controller-revision-hash: {}
            f:helm.sh/chart: {}
            f:statefulset.kubernetes.io/pod-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"066aae32-7afa-4772-aafe-95ca14698a09"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution: {}
            f:podAntiAffinity:
              .: {}
              f:preferredDuringSchedulingIgnoredDuringExecution: {}
          f:automountServiceAccountToken: {}
          f:containers:
            k:{"name":"redis"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"ALLOW_EMPTY_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"BITNAMI_DEBUG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REDIS_DATA_DIR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REDIS_MASTER_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
                k:{"name":"REDIS_MASTER_PORT_NUMBER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REDIS_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
                k:{"name":"REDIS_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REDIS_SENTINEL_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REDIS_SENTINEL_TLS_ENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REDIS_TLS_ENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":6379,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
                f:seccompProfile:
                  .: {}
                  f:type: {}
              f:startupProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/data"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/health"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/opt/bitnami/redis-sentinel/etc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/opt/bitnami/redis/etc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/opt/bitnami/redis/mounted-etc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/opt/bitnami/scripts/start-scripts"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
            k:{"name":"sentinel"}:
              .: {}
              f:args: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"BITNAMI_DEBUG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REDIS_PASSWORD"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:secretKeyRef: {}
                k:{"name":"REDIS_SENTINEL_PORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"REDIS_SENTINEL_TLS_ENABLED"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:lifecycle:
                .: {}
                f:preStop:
                  .: {}
                  f:exec:
                    .: {}
                    f:command: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":26379,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:drop: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
                f:seccompProfile:
                  .: {}
                  f:type: {}
              f:startupProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/data"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/health"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/opt/bitnami/redis-sentinel/etc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/opt/bitnami/redis-sentinel/mounted-etc"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/opt/bitnami/scripts/start-scripts"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostname: {}
          f:initContainers:
            .: {}
            k:{"name":"volume-permissions"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/data"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:subdomain: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"health"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"redis-data"}:
              .: {}
              f:name: {}
              f:persistentVolumeClaim:
                .: {}
                f:claimName: {}
            k:{"name":"redis-tmp-conf"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"sentinel-data"}:
              .: {}
              f:name: {}
              f:persistentVolumeClaim:
                .: {}
                f:claimName: {}
            k:{"name":"start-scripts"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"tmp"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
    - manager: kubelet
      operation: Update
      apiVersion: v1
      time: '2023-11-27T05:33:09Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"10.0.1.217"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      subresource: status
  selfLink: /api/v1/namespaces/redis/pods/redis-node-0
status:
  phase: Running
  conditions:
    - type: Initialized
      status: 'True'
      lastProbeTime: null
      lastTransitionTime: '2023-11-27T05:31:29Z'
    - type: Ready
      status: 'True'
      lastProbeTime: null
      lastTransitionTime: '2023-11-27T05:33:09Z'
    - type: ContainersReady
      status: 'True'
      lastProbeTime: null
      lastTransitionTime: '2023-11-27T05:33:09Z'
    - type: PodScheduled
      status: 'True'
      lastProbeTime: null
      lastTransitionTime: '2023-11-27T05:31:25Z'
  hostIP: 10.0.1.19
  podIP: 10.0.1.217
  podIPs:
    - ip: 10.0.1.217
  startTime: '2023-11-27T05:31:25Z'
  initContainerStatuses:
    - name: volume-permissions
      state:
        terminated:
          exitCode: 0
          reason: Completed
          startedAt: '2023-11-27T05:31:29Z'
          finishedAt: '2023-11-27T05:31:29Z'
          containerID: >-
            containerd://d74e3b8d973368ce36d2e704dcf26773062ea4056c59132b1cd005c05910445c
      lastState: {}
      ready: true
      restartCount: 0
      image: docker.io/bitnami/os-shell:11-debian-11-r90
      imageID: >-
        docker.io/bitnami/os-shell@sha256:dd9b8c7d847ddab8453476cc06f6b3b4ff42514722276e7d1a4e68d3fe9cb4f9
      containerID: >-
        containerd://d74e3b8d973368ce36d2e704dcf26773062ea4056c59132b1cd005c05910445c
      started: false
  containerStatuses:
    - name: redis
      state:
        running:
          startedAt: '2023-11-27T05:31:29Z'
      lastState: {}
      ready: true
      restartCount: 0
      image: docker.io/redis/redis-stack-server:6.2.6-v0
      imageID: >-
        docker.io/redis/redis-stack-server@sha256:dc8fe91dba28b59fffc51350c85eaaa3b34e876c20f21d0d9bad69ee71b18d8f
      containerID: >-
        containerd://35b20cbb1915c8b3b3806c7ff688f3fead42273655c9d9bdac402458901077a9
      started: true
    - name: sentinel
      state:
        running:
          startedAt: '2023-11-27T05:31:29Z'
      lastState: {}
      ready: true
      restartCount: 0
      image: docker.io/bitnami/redis-sentinel:7.2.3-debian-11-r0
      imageID: >-
        docker.io/bitnami/redis-sentinel@sha256:5165e3cbb318489082710a091e8ef4c690cb07a1f1ad899f4a627b675b4a1b56
      containerID: >-
        containerd://815bec49c70ca40ec436204ad506207c07c578edc7ac87bcfde8003e2fe8ff1a
      started: true
  qosClass: Burstable
spec:
  volumes:
    - name: redis-data-backup
      persistentVolumeClaim:
        claimName: redis-data-redis-master-0
    - name: redis-data
      persistentVolumeClaim:
        claimName: redis-data-redis-node-0
    - name: sentinel-data
      persistentVolumeClaim:
        claimName: sentinel-data-redis-node-0
    - name: start-scripts
      configMap:
        name: redis-scripts
        defaultMode: 493
    - name: health
      configMap:
        name: redis-health
        defaultMode: 493
    - name: config
      configMap:
        name: redis-configuration
        defaultMode: 420
    - name: redis-tmp-conf
      emptyDir: {}
    - name: tmp
      emptyDir: {}
    - name: kube-api-access-5slv6
      projected:
        sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              name: kube-root-ca.crt
              items:
                - key: ca.crt
                  path: ca.crt
          - downwardAPI:
              items:
                - path: namespace
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
        defaultMode: 420
  initContainers:
    - name: volume-permissions
      image: docker.io/bitnami/os-shell:11-debian-11-r90
      command:
        - /bin/bash
        - '-ec'
        - |
          chown -R 1001:1001 /data
      resources: {}
      volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: kube-api-access-5slv6
          readOnly: true
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
      securityContext:
        runAsUser: 0
  containers:
    - name: redis
      image: docker.io/redis/redis-stack-server:6.2.6-v0
      command:
        - /bin/bash
      args:
        - '-c'
        - /opt/bitnami/scripts/start-scripts/start-node.sh
      ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
      env:
        - name: BITNAMI_DEBUG
          value: 'false'
        - name: REDIS_MASTER_PORT_NUMBER
          value: '6379'
        - name: ALLOW_EMPTY_PASSWORD
          value: 'no'
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis
              key: redis-password
        - name: REDIS_MASTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis
              key: redis-password
        - name: REDIS_TLS_ENABLED
          value: 'no'
        - name: REDIS_PORT
          value: '6379'
        - name: REDIS_SENTINEL_TLS_ENABLED
          value: 'no'
        - name: REDIS_SENTINEL_PORT
          value: '26379'
        - name: REDIS_DATA_DIR
          value: /data
      resources:
        limits:
          cpu: '2'
          memory: 24Gi
        requests:
          cpu: 500m
          memory: 512Mi
      volumeMounts:
        - name: redis-data-backup
          mountPath: /data/backup
        - name: start-scripts
          mountPath: /opt/bitnami/scripts/start-scripts
        - name: health
          mountPath: /health
        - name: sentinel-data
          mountPath: /opt/bitnami/redis-sentinel/etc
        - name: redis-data
          mountPath: /data
        - name: config
          mountPath: /opt/bitnami/redis/mounted-etc
        - name: redis-tmp-conf
          mountPath: /opt/bitnami/redis/etc
        - name: tmp
          mountPath: /tmp
        - name: kube-api-access-5slv6
          readOnly: true
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      livenessProbe:
        exec:
          command:
            - sh
            - '-c'
            - /health/ping_liveness_local.sh 5
        initialDelaySeconds: 20
        timeoutSeconds: 5
        periodSeconds: 5
        successThreshold: 1
        failureThreshold: 5
      readinessProbe:
        exec:
          command:
            - sh
            - '-c'
            - /health/ping_readiness_local.sh 3
        initialDelaySeconds: 100
        timeoutSeconds: 3
        periodSeconds: 5
        successThreshold: 1
        failureThreshold: 5
      startupProbe:
        exec:
          command:
            - sh
            - '-c'
            - /health/ping_liveness_local.sh 5
        initialDelaySeconds: 10
        timeoutSeconds: 5
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 22
      lifecycle:
        preStop:
          exec:
            command:
              - /bin/bash
              - '-c'
              - /opt/bitnami/scripts/start-scripts/prestop-redis.sh
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
      securityContext:
        capabilities:
          drop:
            - ALL
        runAsUser: 1001
        runAsGroup: 0
        runAsNonRoot: true
        allowPrivilegeEscalation: false
        seccompProfile:
          type: RuntimeDefault
    - name: sentinel
      image: docker.io/bitnami/redis-sentinel:7.2.3-debian-11-r0
      command:
        - /bin/bash
      args:
        - '-c'
        - /opt/bitnami/scripts/start-scripts/start-sentinel.sh
      ports:
        - name: redis-sentinel
          containerPort: 26379
          protocol: TCP
      env:
        - name: BITNAMI_DEBUG
          value: 'false'
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis
              key: redis-password
        - name: REDIS_SENTINEL_TLS_ENABLED
          value: 'no'
        - name: REDIS_SENTINEL_PORT
          value: '26379'
      resources:
        limits:
          cpu: 500m
          memory: 512Mi
        requests:
          cpu: 250m
          memory: 256Mi
      volumeMounts:
        - name: redis-data-backup
          mountPath: /data/backup
        - name: start-scripts
          mountPath: /opt/bitnami/scripts/start-scripts
        - name: health
          mountPath: /health
        - name: sentinel-data
          mountPath: /opt/bitnami/redis-sentinel/etc
        - name: redis-data
          mountPath: /data
        - name: config
          mountPath: /opt/bitnami/redis-sentinel/mounted-etc
        - name: kube-api-access-5slv6
          readOnly: true
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      livenessProbe:
        exec:
          command:
            - sh
            - '-c'
            - /health/ping_sentinel.sh 5
        initialDelaySeconds: 20
        timeoutSeconds: 5
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 6
      readinessProbe:
        exec:
          command:
            - sh
            - '-c'
            - /health/ping_sentinel.sh 1
        initialDelaySeconds: 20
        timeoutSeconds: 1
        periodSeconds: 5
        successThreshold: 1
        failureThreshold: 6
      startupProbe:
        exec:
          command:
            - sh
            - '-c'
            - /health/ping_sentinel.sh 5
        initialDelaySeconds: 10
        timeoutSeconds: 5
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 22
      lifecycle:
        preStop:
          exec:
            command:
              - /bin/bash
              - '-c'
              - /opt/bitnami/scripts/start-scripts/prestop-sentinel.sh
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
      securityContext:
        capabilities:
          drop:
            - ALL
        runAsUser: 1001
        runAsGroup: 0
        runAsNonRoot: true
        allowPrivilegeEscalation: false
        seccompProfile:
          type: RuntimeDefault
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: redis
  serviceAccount: redis
  automountServiceAccountToken: true
  nodeName: ip-10-0-1-19.ec2.internal
  securityContext:
    fsGroup: 1001
  hostname: redis-node-0
  subdomain: redis-headless
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: application
                operator: In
                values:
                  - redis
              - key: company
                operator: In
                values:
                  - brompton-energy
              - key: role
                operator: In
                values:
                  - replica
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: role
                  operator: In
                  values:
                    - replica
            topologyKey: kubernetes.io/hostname
  schedulerName: default-scheduler
  tolerations:
    - key: node.kubernetes.io/not-ready
      operator: Exists
      effect: NoExecute
      tolerationSeconds: 300
    - key: node.kubernetes.io/unreachable
      operator: Exists
      effect: NoExecute
      tolerationSeconds: 300
  priority: 0
  enableServiceLinks: true
  preemptionPolicy: PreemptLowerPriority
