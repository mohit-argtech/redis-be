# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: redis-app-deployment
#   namespace: redis
#   labels:
#     app: redis-app
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: redis-app
#   template:
#     metadata:
#       labels:
#         app: redis-app
#     spec:
#       containers:
#       - name: redis-app-deployment
#         image: pavansa/redis-app
#         resources:
#           requests:
#             cpu: "100m"
#         imagePullPolicy: IfNotPresent
#         ports:
#         - containerPort: 26379
--- 
apiVersion: v1
# Indicates this as a service
kind: Service
metadata:
 # Service name
 name: redis-py-app-service
spec:
 selector:
   # Selector for Pods
   app: redis-py-app
 ports:
   # Port Map
 - port: 26379
   targetPort: 26379
   protocol: TCP
 type: LoadBalancer
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-py-app-pv
spec:
  capacity:
    storage: 3Gi  # Adjust the storage size as needed
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: gp2
  hostPath:
    path: /data/redis-py-app-pv  # Replace with the actual path on the host
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-py-app-pv-claim
  labels:
    app: redis-py-app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: gp2
--- 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-py-app #deployment name
  namespace: redis
  labels:
    app: redis-py-app #deployment label
spec:
  replicas: 1 #a single replica pod
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: redis-py-app #which pods is the deployment managing, as defined by the pod template
  template: #pod template
    metadata:
      labels:
        app: redis-py-app #label for pod/s
    spec:
      volumes:
        - name: db
          persistentVolumeClaim:
            claimName: redis-py-app-pv-claim
      initContainers:
        - name: init
          image: busybox
          command:
            - /bin/sh
            - '-c'
            - |
                            chown -R 1001 /db
          resources: {}
          volumeMounts:
            - name: db
              mountPath: /db
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      containers:
        - name:  redis-py-app #Container name (DNS_LABEL, unique)
          image: redislabs/redisinsight:latest #repo/image
          imagePullPolicy: IfNotPresent #Always pull image
          volumeMounts:
          - name: db #Pod volumes to mount into the container's filesystem. Cannot be updated.
            mountPath: /db
          ports:
          - containerPort: 8001 #exposed container port and protocol
            protocol: TCP