# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: migration-server-pv
#   namespace: redis
# spec:
#   capacity:
#     storage: 50Gi
#   volumeMode: Filesystem
#   accessModes:
#     - ReadWriteOnce
#   persistentVolumeReclaimPolicy: Retain
#   storageClassName: gp2
#   csi:
#     driver: ebs.csi.aws.com
#     volumeHandle: vol-0513381011298c908
  # awsElasticBlockStore:
  #   volumeID: vol-0513381011298c908
  #   fsType: ext4  # or xfs, depending on your filesystem

apiVersion: v1
kind: PersistentVolume
metadata:
  name: migration-server-pv
spec:
  capacity:
    storage: 50Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: gp2
  csi:
    driver: ebs.csi.aws.com
    fsType: ext4
    volumeHandle: vol-0513381011298c908
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: topology.ebs.csi.aws.com/zone
              operator: In
              values:
                - us-east-1a
                - us-east-1b
                - us-east-1c

--- 

apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-existing-ebs-volume
spec:
  capacity:
    storage: 40Gi  # Adjust according to your EBS volume size
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ebs-sc-new
  csi:
    fsType: xfs
    driver: ebs.csi.aws.com
    volumeHandle: vol-0513381011298c908  # Replace with your EBS volume ID
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: topology.ebs.csi.aws.com/zone
              operator: In
              values:
                - us-east-1a

--- 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-redis-cluster-claim-volume
spec:
  capacity:
    storage: 40Gi  # Adjust according to your EBS volume size
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ebs-sc-new
  csi:
    fsType: xfs
    driver: ebs.csi.aws.com
    volumeHandle: vol-0513381011298c908  # Replace with your EBS volume ID
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: topology.ebs.csi.aws.com/zone
              operator: In
              values:
                - us-east-1a

--- 

# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: my-existing-ebs-volume
#   uid: addd5db3-2ef5-454c-94a4-f9ef94515b3a
#   resourceVersion: '11307450'
#   creationTimestamp: '2023-11-14T07:04:08Z'
#   labels:
#     account: devops
#     k8slens-edit-resource-version: v1
#   annotations:
#     kubectl.kubernetes.io/last-applied-configuration: >
#       {"apiVersion":"v1","kind":"PersistentVolume","metadata":{"annotations":{},"name":"my-existing-ebs-volume"},"spec":{"accessModes":["ReadWriteOnce"],"capacity":{"storage":"40Gi"},"csi":{"driver":"ebs.csi.aws.com","fsType":"xfs","volumeHandle":"vol-0513381011298c908"},"nodeAffinity":{"required":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"topology.ebs.csi.aws.com/zone","operator":"In","values":["us-east-1a"]}]}]}},"persistentVolumeReclaimPolicy":"Retain","storageClassName":"ebs-sc-new","volumeMode":"Filesystem"}}
#     pv.kubernetes.io/bound-by-controller: 'yes'
#   finalizers:
#     - kubernetes.io/pv-protection
#     - external-attacher/ebs-csi-aws-com
#   managedFields:
#     - manager: kubectl-client-side-apply
#       operation: Update
#       apiVersion: v1
#       time: '2023-11-14T07:04:08Z'
#       fieldsType: FieldsV1
#       fieldsV1:
#         f:metadata:
#           f:annotations:
#             .: {}
#             f:kubectl.kubernetes.io/last-applied-configuration: {}
#         f:spec:
#           f:accessModes: {}
#           f:capacity: {}
#           f:csi:
#             .: {}
#             f:driver: {}
#             f:fsType: {}
#             f:volumeHandle: {}
#           f:nodeAffinity:
#             .: {}
#             f:required: {}
#           f:persistentVolumeReclaimPolicy: {}
#           f:storageClassName: {}
#           f:volumeMode: {}
#     - manager: kube-scheduler
#       operation: Update
#       apiVersion: v1
#       time: '2023-11-14T07:04:18Z'
#       fieldsType: FieldsV1
#       fieldsV1:
#         f:metadata:
#           f:annotations:
#             f:pv.kubernetes.io/bound-by-controller: {}
#         f:spec:
#           f:claimRef:
#             .: {}
#             f:apiVersion: {}
#             f:kind: {}
#             f:namespace: {}
#             f:uid: {}
#     - manager: csi-attacher
#       operation: Update
#       apiVersion: v1
#       time: '2023-11-14T07:04:19Z'
#       fieldsType: FieldsV1
#       fieldsV1:
#         f:metadata:
#           f:finalizers:
#             v:"external-attacher/ebs-csi-aws-com": {}
#     - manager: node-fetch
#       operation: Update
#       apiVersion: v1
#       time: '2023-11-16T18:23:22Z'
#       fieldsType: FieldsV1
#       fieldsV1:
#         f:metadata:
#           f:labels:
#             .: {}
#             f:account: {}
#             f:k8slens-edit-resource-version: {}
#     - manager: kube-controller-manager
#       operation: Update
#       apiVersion: v1
#       time: '2023-11-16T18:23:25Z'
#       fieldsType: FieldsV1
#       fieldsV1:
#         f:spec:
#           f:claimRef:
#             f:name: {}
#             f:resourceVersion: {}
#     - manager: kube-controller-manager
#       operation: Update
#       apiVersion: v1
#       time: '2023-11-16T18:23:25Z'
#       fieldsType: FieldsV1
#       fieldsV1:
#         f:status:
#           f:phase: {}
#       subresource: status
#     - manager: csi-resizer
#       operation: Update
#       apiVersion: v1
#       time: '2023-11-23T15:40:37Z'
#       fieldsType: FieldsV1
#       fieldsV1:
#         f:spec:
#           f:capacity:
#             f:storage: {}
#   selfLink: /api/v1/persistentvolumes/my-existing-ebs-volume
# status:
#   phase: Bound
# spec:
#   capacity:
#     storage: 512Gi
#   csi:
#     driver: ebs.csi.aws.com
#     volumeHandle: vol-0513381011298c908
#     fsType: xfs
#   accessModes:
#     - ReadWriteOnce
#   claimRef:
#     kind: PersistentVolumeClaim
#     namespace: redis
#     name: my-ebs-claim
#     uid: 9ffc6db2-16d0-4126-9ebb-fd66a4b31a7c
#     apiVersion: v1
#     resourceVersion: '8431369'
#   persistentVolumeReclaimPolicy: Retain
#   storageClassName: ebs-sc-new
#   volumeMode: Filesystem
#   nodeAffinity:
#     required:
#       nodeSelectorTerms:
#         - matchExpressions:
#             - key: topology.ebs.csi.aws.com/zone
#               operator: In
#               values:
#                 - us-east-1a

--- 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-master-data
spec:
  capacity:
    storage: 100Gi  # Adjust according to your EBS volume size
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: ebs-sc-new
  claimRef:
    name: redis-master-data
    namespace: redis
  csi:
    fsType: xfs
    driver: ebs.csi.aws.com
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: topology.ebs.csi.aws.com/zone
              operator: In
              values:
                - us-east-1a